<!DOCTYPE html>  
<html lang="zh">  
<head>  
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width, initial-scale=1.0">  
    <title>寻宝游戏</title>  
    <link rel="stylesheet" href="styles.css">  
</head>  
<body>  
    <div class="container">  
        <h1>寻宝游戏</h1>  
        <button id="startButton">开始寻宝</button>  
        <div id="output"></div>  
        <div id="animation" class="hidden">🔍</div>  
    </div>  

    <script src="script.js"></script>  
</body>  
</html>

// 模拟宝藏地图API  
class TreasureMap {  
    static getInitialClue() {  
        return new Promise((resolve) => {  
            setTimeout(() => {  
                resolve("在古老的图书馆里找到了第一个线索...");  
            }, 1000);  
        });  
    }  

    static decodeAncientScript(clue) {  
        return new Promise((resolve, reject) => {  
            setTimeout(() => {  
                if (!clue) {  
                    reject("没有线索可以解码!");  
                }  
                resolve("解码成功!宝藏在一座古老的神庙中...");  
            }, 1500);  
        });  
    }  

    static encounterTrap() {  
        return new Promise((resolve, reject) => {  
            setTimeout(() => {  
                const random = Math.random();  
                if (random < 0.5) {  
                    reject("小心!掉入了陷阱!");  
                }  
                resolve("成功避开了陷阱!");  
            }, 1500);  
        });  
    }  

    static searchTemple(location) {  
        return new Promise((resolve, reject) => {  
            setTimeout(() => {  
                const random = Math.random();  
                if (random < 0.5) {  
                    reject("糟糕!遇到了神庙守卫!");  
                }  
                resolve("找到了一个神秘的箱子...");  
            }, 2000);  
        });  
    }  

    static openTreasureBox() {  
        return new Promise((resolve) => {  
            setTimeout(() => {  
                resolve("恭喜!你找到了传说中的宝藏!");  
            }, 1000);  
        });  
    }  
}  

async function findTreasureWithAsyncAwait() {  
    const output = document.getElementById('output');  
    const animation = document.getElementById('animation');  
    output.innerHTML = ""; // 清空输出区域  
    animation.classList.remove('hidden'); // 显示动画  

    try {  
        const clue = await TreasureMap.getInitialClue();  
        output.innerHTML += `<p>${clue}</p>`;  
        
        const script = await TreasureMap.decodeAncientScript(clue);  
        output.innerHTML += `<p>${script}</p>`;  
        
        const trapMessage = await TreasureMap.encounterTrap();  
        output.innerHTML += `<p>${trapMessage}</p>`;  
        
        const box = await TreasureMap.searchTemple(script);  
        output.innerHTML += `<p>${box}</p>`;  
        
        const treasure = await TreasureMap.openTreasureBox();  
        output.innerHTML += `<p>${treasure}</p>`;  
    } catch (error) {  
        output.innerHTML += `<p style="color:red;">任务失败:${error}</p>`;   
    } finally {  
        animation.classList.add('hidden'); // 隐藏动画  
    }  
}  

// 绑定按钮点击事件  
document.getElementById('startButton').addEventListener('click', findTreasureWithAsyncAwait);


* {  
    margin: 0;  
    padding: 0;  
    box-sizing: border-box;  
}  

body {  
    display: flex;  
    justify-content: center;  
    align-items: center;  
    flex-direction: column;  
    height: 100vh;  
    background-color: #f0f8ff; /* 背景颜色 */  
    font-family: Arial, sans-serif;  
}  

.container {  
    text-align: center;  
}  

h1 {  
    margin-bottom: 20px;  
}  

button {  
    padding: 10px 20px;  
    font-size: 16px;  
    cursor: pointer;  
    background-color: #4CAF50; /* 按钮颜色 */  
    color: white;  
    border: none;  
    border-radius: 5px;  
}  

button:hover {  
    background-color: #45a049; /* 悬停效果 */  
}  

#output {  
    margin-top: 20px;  
    font-size: 18px;  
    color: #333;  
}  

.hidden {  
    display: none;  
}  

#animation {  
    font-size: 50px;  
    animation: spin 1s infinite linear;  
}  

@keyframes spin {  
    0% { transform: rotate(0deg); }  
    100% { transform: rotate(360deg); }  
}
# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
